version: '3.9'

services:
#  app:
#    build:
#      context: .
#      dockerfile: ./deploy/Dockerfile
#    container_name: spring_app
#    environment:
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres
#      - SPRING_DATA_REDIS_HOST=redis
#      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
#      - JASYPT_MY_MAIN_SECRET_IS=${JASYPT_MY_MAIN_SECRET_IS}
#    ports:
#      - "8080:8080"
#    depends_on:
#      postgres:
#        condition: service_healthy
#      redis:
#        condition: service_started
#      kafka:
#        condition: service_healthy
#    networks:
#      - app-network
#    deploy:
#      resources:
#        limits:
#          cpus: '1'
#          memory: 2G
#        reservations:
#          cpus: '0.3'
#          memory: 512M

  postgres:
    image: postgres:latest
    container_name: postgres_container
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data/
      - ./postgres/init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.8'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres -c max_connections=100
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d postgres" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: >
      redis-server
      --appendonly yes
      --maxclients 500
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --tcp-backlog 128
      --tcp-keepalive 60
      --maxmemory 2gb
      --maxmemory-policy noeviction
    restart: always
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: 1
      ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT: 3
      ZOOKEEPER_MAX_CLIENT_CNXNS: 60
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5


  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_CONTROLLED_SHUTDOWN_ENABLE: "true"
      KAFKA_AUTO_LEADER_REBALANCE_ENABLE: "true"
    volumes:
      - kafka-data:/var/lib/kafka/data
      - ./kafka/init.sh:/tmp/init-kafka.sh
      - ./kafka/clear-zk.sh:/tmp/clear-zk.sh
    networks:
      - app-network
    command: >
      bash -c "
        sleep 5 &&
        chmod +x /tmp/clear-zk.sh &&
        /tmp/clear-zk.sh && /etc/confluent/docker/run &
        sleep 10 &&
        chmod +x /tmp/init-kafka.sh && 
        /tmp/init-kafka.sh &&
        wait
      "
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: always
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: always
    networks:
      - app-network

volumes:
  pgdata:
    driver: local
  redis-data:
  prometheus_data:
  grafana_data:
  zookeeper-data:
  zookeeper-log:
  kafka-data:

networks:
  app-network:
    driver: bridge