version: '3.9'

services:
  app:
    build:
      context: .
      dockerfile: ./deploy/Dockerfile
    container_name: spring_app
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - JASYPT_MY_MAIN_SECRET_IS=${JASYPT_MY_MAIN_SECRET_IS}
      - JAVA_OPTS=-Xmx256m -Xms128m
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 300M
        reservations:
          memory: 128M

  postgres:
    image: postgres:latest
    container_name: postgres_container
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data/
      - ./postgres/init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    command: >
      postgres -c max_connections=30
               -c shared_buffers=64MB
               -c effective_cache_size=128MB
               -c maintenance_work_mem=16MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=4MB
               -c default_statistics_target=50
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d postgres" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 150M
        reservations:
          memory: 64M

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: >
      redis-server
      --appendonly yes
      --maxclients 100
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 32mb
      --tcp-backlog 64
      --tcp-keepalive 60
      --maxmemory 100mb
      --maxmemory-policy noeviction
    restart: always
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 120M
        reservations:
          memory: 32M

  kafka:
    image: bitnami/kafka:3.3.2
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_HEAP_OPTS=-Xmx256m -Xms128m
      - KAFKA_CFG_LOG_CLEANER_ENABLE=false
      - KAFKA_CFG_LOG_RETENTION_HOURS=1
      - KAFKA_CFG_LOG_RETENTION_BYTES=52428800
      - KAFKA_CFG_LOG_SEGMENT_BYTES=26214400
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_KRAFT_CLUSTER_ID=LelM2dIFQkiUFVnRfxOQ4A
    volumes:
      - kafka-data:/bitnami/kafka
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "bash", "-c", "cat < /dev/null > /dev/tcp/localhost/9092"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 320M
        reservations:
          memory: 128M

  kafka-init:
    image: bitnami/kafka:3.3.2
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_HEAP_OPTS=-Xms256m -Xmx512m
    volumes:
      - ./kafka/init.sh:/init.sh
    entrypoint: [ "/bin/bash", "/init.sh" ]
    networks:
      - app-network
    restart: "no"
    deploy:
      resources:
        limits:
          memory: 128M

#  prometheus:
#    image: prom/prometheus:latest
#    container_name: prometheus
#    ports:
#      - "9090:9090"
#    volumes:
#      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#      - prometheus_data:/prometheus
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#      - '--storage.tsdb.path=/prometheus'
#      - '--web.console.libraries=/etc/prometheus/console_libraries'
#      - '--web.console.templates=/etc/prometheus/consoles'
#      - '--web.enable-lifecycle'
#      - '--storage.tsdb.retention.time=7d'
#      - '--query.max-samples=10000'
#      - '--query.timeout=2m'
#    restart: always
#    networks:
#      - app-network
#    deploy:
#      resources:
#        limits:
#          cpus: '0.1'
#          memory: 96M
#        reservations:
#          memory: 32M
#
#  grafana:
#    image: grafana/grafana:latest
#    container_name: grafana
#    ports:
#      - "3000:3000"
#    volumes:
#      - grafana_data:/var/lib/grafana
#      - ./grafana/provisioning:/etc/grafana/provisioning
#    environment:
#      - GF_SECURITY_ADMIN_USER=admin
#      - GF_SECURITY_ADMIN_PASSWORD=admin
#      - GF_USERS_ALLOW_SIGN_UP=false
#      - GF_ANALYTICS_REPORTING_ENABLED=false
#      - GF_ALERTING_ENABLED=false
#      - GF_PLUGINS_ENABLE_ALPHA=false
#      - GF_AUTH_PROXY_ENABLED=false
#    restart: always
#    networks:
#      - app-network
#    deploy:
#      resources:
#        limits:
#          cpus: '0.1'
#          memory: 96M
#        reservations:
#          memory: 32M

volumes:
  pgdata:
    driver: local
  redis-data:
  prometheus_data:
  grafana_data:
  zookeeper-data:
  zookeeper-log:
  kafka-data:

networks:
  app-network:
    driver: bridge